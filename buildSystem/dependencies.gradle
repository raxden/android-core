// Top-level build file where you can add configuration options common to all sub-projects/modules.

ext {

    // ========== VERSIONS =========================================================================

    // Androidx dependencies
    def constraintLayoutVersion = '1.1.3'
    def materialVersion = '1.1.0-alpha05'
    def kotlinVersion = '1.3.31'

    // dependencies
    def rxAndroidVersion = '2.1.1'              // https://github.com/ReactiveX/RxAndroid
    def rxKotlinVersion = '2.3.0'               // https://github.com/ReactiveX/RxKotlin
    def rxPermissionsVersion = '0.10.2'         // https://github.com/tbruyelle/RxPermissions
    def roomVersion = '2.1.0-beta01'            // https://developer.android.com/jetpack/androidx/releases/room
    def androidThreeTenVersion = '1.2.0'        // https://github.com/JakeWharton/ThreeTenABP
    def crashlyticsVersion = '2.10.1'           // https://fabric.io/kits/android/crashlytics/install
    def gsonVersion = '2.8.5'                   // https://github.com/google/gson
    def daggerVersion = '2.22.1'                // https://github.com/google/dagger
    def glideVersion = '4.9.0'                  // https://github.com/bumptech/glide
    def okHttpVersion = '3.12.0'                // https://github.com/square/okhttp
    def retrofitVersion = '2.5.0'               // https://github.com/square/retrofit
    def timberVersion = '4.7.1'                 // https://github.com/JakeWharton/timber

    // Testing
    def junitVersion = '4.12'
    def assertJVersion = '1.7.0'
    def mockitoVersion = '2.27.0'
    def robolectricVersion = '4.2.1'

    // ========== LIBRARIES ========================================================================

    def support = [
            material        : [group: 'com.google.android.material', name: 'material', version: materialVersion],
            constraintLayout: [group: 'androidx.constraintlayout', name: 'constraintlayout', version: constraintLayoutVersion]
    ]

    def kotlinLibs = [
            core: [group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk7', version: kotlinVersion],
            test: [group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit', version: kotlinVersion]
    ]

    def playServicesLibs = [
            location: [group: 'com.google.android.gms', name: 'play-services-location', version: '16.0.0']
    ]

    def firebaseLibs = [
            core     : [group: 'com.google.firebase', name: 'firebase-core', version: '16.0.6'],
            analytics: [group: 'com.google.firebase', name: 'firebase-analytics', version: '16.0.5'],
            messaging: [group: 'com.google.firebase', name: 'firebase-messaging', version: '17.3.4'],
            auth     : [group: 'com.google.firebase', name: 'firebase-auth', version: '16.0.5']
    ]

    def daggerLibs = [
            androidSupport  : [group: 'com.google.dagger', name: 'dagger-android-support', version: daggerVersion],
            compiler        : [group: 'com.google.dagger', name: 'dagger-compiler', version: daggerVersion],
            androidProcessor: [group: 'com.google.dagger', name: 'dagger-android-processor', version: daggerVersion]
    ]

    def roomLibs = [
            runtime : [group: 'androidx.room', name: 'room-runtime', version: roomVersion],
            compiler: [group: 'androidx.room', name: 'room-compiler', version: roomVersion],
            rxjava2 : [group: 'androidx.room', name: 'room-rxjava2', version: roomVersion],
            test    : [group: 'androidx.room', name: 'room-testing', version: roomVersion]
    ]

    def rxLibs = [
            android: [group: 'io.reactivex.rxjava2', name: 'rxandroid', version: rxAndroidVersion],
            kotlin : [group: 'io.reactivex.rxjava2', name: 'rxkotlin', version: rxKotlinVersion]
    ]

    def retrofitLibs = [
            core            : [group: 'com.squareup.retrofit2', name: 'retrofit', version: retrofitVersion],
            rx              : [group: 'com.squareup.retrofit2', name: 'adapter-rxjava2', version: retrofitVersion],
            converterGson   : [group: 'com.squareup.retrofit2', name: 'converter-gson', version: retrofitVersion],
            converterScalars: [group: 'com.squareup.retrofit2', name: 'converter-scalars', version: retrofitVersion],
            mock            : [group: 'com.squareup.retrofit2', name: 'retrofit-mock', version: retrofitVersion]
    ]

    def okHttpLibs = [
            core              : [group: 'com.squareup.okhttp3', name: 'okhttp', version: okHttpVersion],
            loggingInterceptor: [group: 'com.squareup.okhttp3', name: 'logging-interceptor', version: okHttpVersion],
            mockWebServer     : [group: 'com.squareup.okhttp3', name: 'mockwebserver', version: okHttpVersion],
    ]

    def glideLibs = [
            core    : [group: 'com.github.bumptech.glide', name: 'glide', version: glideVersion],
            compiler: [group: 'com.github.bumptech.glide', name: 'compiler', version: glideVersion]
    ]

    def libs = [
            gson         : [group: 'com.google.code.gson', name: 'gson', version: gsonVersion],
            timber       : [group: 'com.jakewharton.timber', name: 'timber', version: timberVersion],
            threetenabp  : [group: 'com.jakewharton.threetenabp', name: 'threetenabp', version: androidThreeTenVersion],
            rxPermissions: [group: 'com.github.tbruyelle', name: 'rxpermissions', version: rxPermissionsVersion],
            crashlytics  : [group: 'com.crashlytics.sdk.android', name: 'crashlytics', version: crashlyticsVersion, ext: 'aar']
    ]

    def robolectricLibs = [
            core    : [group: 'org.robolectric', name: 'robolectric', version: robolectricVersion],
            multidex: [group: 'org.robolectric', name: 'shadows-multidex', version: robolectricVersion]
    ]

    def mockitoLibs = [
            mockito: [group: 'org.mockito', name: 'mockito-core', version: mockitoVersion]
    ]

    def testLibs = [
            junit  : [group: 'junit', name: 'junit', version: junitVersion],
            assertj: [group: 'org.assertj', name: 'assertj-core', version: assertJVersion]
    ]

    // ========== MODULES DEPENDENCIES =============================================================

    def modules = [
            app       : ':app',
            data      : ':data',
            domain    : ':domain',
            commons   : ':commons',
            components: ':components',
            resources : ':resources'
    ]

    appDependencies = [
            [configuration: "implementation", dependency: project(modules.commons)],
            [configuration: "implementation", dependency: project(modules.components)],
            [configuration: "implementation", dependency: project(modules.domain)],
            [configuration: "implementation", dependency: project(modules.data)],

            [configuration: "implementation", dependency: support.material],
            [configuration: "implementation", dependency: support.constraintLayout],
            [configuration: "implementation", dependency: kotlinLibs.core],
            [configuration: "implementation", dependency: playServicesLibs.location],
            [configuration: "implementation", dependency: firebaseLibs.core],
            [configuration: "implementation", dependency: firebaseLibs.analytics],
            [configuration: "implementation", dependency: firebaseLibs.messaging],
            [configuration: "implementation", dependency: firebaseLibs.auth],
            [configuration: "implementation", dependency: daggerLibs.androidSupport],
            [configuration: "kapt", dependency: daggerLibs.compiler],
            [configuration: "kapt", dependency: daggerLibs.androidProcessor],
            [configuration: "implementation", dependency: rxLibs.android],
            [configuration: "implementation", dependency: rxLibs.kotlin],
            [configuration: "implementation", dependency: retrofitLibs.core],
            [configuration: "implementation", dependency: retrofitLibs.rx],
            [configuration: "implementation", dependency: retrofitLibs.converterGson],
            [configuration: "implementation", dependency: retrofitLibs.converterScalars],
            [configuration: "implementation", dependency: okHttpLibs.core],
            [configuration: "implementation", dependency: okHttpLibs.loggingInterceptor],
            [configuration: "implementation", dependency: roomLibs.runtime],
            [configuration: "kapt", dependency: roomLibs.compiler],
            [configuration: "implementation", dependency: roomLibs.rxjava2],
            [configuration: "implementation", dependency: glideLibs.core],
            [configuration: "kapt", dependency: glideLibs.compiler],
            [configuration: "implementation", dependency: libs.gson],
            [configuration: "implementation", dependency: libs.threetenabp],
            [configuration: "implementation", dependency: libs.timber],
            [configuration: "implementation", dependency: libs.rxPermissions],
            [configuration: "implementation", dependency: libs.crashlytics, options: {
                transitive = true
            }],

            [configuration: "testImplementation", dependency: project(modules.commons)],
            [configuration: "testImplementation", dependency: testLibs.junit],
            [configuration: "testImplementation", dependency: testLibs.assertj],
            [configuration: "testImplementation", dependency: kotlinLibs.test],
            [configuration: "testImplementation", dependency: mockitoLibs.mockito],
            [configuration: "testImplementation", dependency: robolectricLibs.core],
            [configuration: "testImplementation", dependency: robolectricLibs.multidex],
            [configuration: "kaptTest", dependency: daggerLibs.compiler]
    ]

    domainDependencies = [
            [configuration: "implementation", dependency: project(modules.commons)],

            [configuration: "implementation", dependency: kotlinLibs.core],
            [configuration: "implementation", dependency: daggerLibs.androidSupport],
            [configuration: "kapt", dependency: daggerLibs.compiler],
            [configuration: "kapt", dependency: daggerLibs.androidProcessor],
            [configuration: "implementation", dependency: libs.threetenabp],
            [configuration: "implementation", dependency: libs.timber],
            [configuration: "implementation", dependency: rxLibs.android],
            [configuration: "implementation", dependency: rxLibs.kotlin],
            [configuration: "implementation", dependency: roomLibs.runtime],
            [configuration: "kapt", dependency: roomLibs.compiler],
            [configuration: "implementation", dependency: roomLibs.rxjava2],

            [configuration: "testImplementation", dependency: project(modules.commons)],
            [configuration: "testImplementation", dependency: testLibs.junit],
            [configuration: "testImplementation", dependency: testLibs.assertj],
            [configuration: "testImplementation", dependency: kotlinLibs.test],
            [configuration: "testImplementation", dependency: mockitoLibs.mockito],
            [configuration: "testImplementation", dependency: robolectricLibs.core],
            [configuration: "testImplementation", dependency: robolectricLibs.multidex]
    ]

    dataDependencies = [
            [configuration: "implementation", dependency: project(modules.commons)],
            [configuration: "implementation", dependency: project(modules.domain)],

            [configuration: "implementation", dependency: kotlinLibs.core],
            [configuration: "implementation", dependency: daggerLibs.androidSupport],
            [configuration: "kapt", dependency: daggerLibs.compiler],
            [configuration: "kapt", dependency: daggerLibs.androidProcessor],
            [configuration: "implementation", dependency: libs.gson],
            [configuration: "implementation", dependency: libs.threetenabp],
            [configuration: "implementation", dependency: libs.timber],
            [configuration: "implementation", dependency: rxLibs.android],
            [configuration: "implementation", dependency: rxLibs.kotlin],
            [configuration: "implementation", dependency: retrofitLibs.core],
            [configuration: "implementation", dependency: retrofitLibs.rx],
            [configuration: "implementation", dependency: retrofitLibs.converterGson],
            [configuration: "implementation", dependency: retrofitLibs.converterScalars],
            [configuration: "implementation", dependency: okHttpLibs.core],
            [configuration: "implementation", dependency: okHttpLibs.loggingInterceptor],
            [configuration: "implementation", dependency: roomLibs.runtime],
            [configuration: "kapt", dependency: roomLibs.compiler],
            [configuration: "implementation", dependency: roomLibs.rxjava2],

            [configuration: "testImplementation", dependency: project(modules.commons)],
            [configuration: "testImplementation", dependency: testLibs.junit],
            [configuration: "testImplementation", dependency: testLibs.assertj],
            [configuration: "testImplementation", dependency: kotlinLibs.test],
            [configuration: "testImplementation", dependency: retrofitLibs.mock],
            [configuration: "testImplementation", dependency: okHttpLibs.mockWebServer],
            [configuration: "testImplementation", dependency: mockitoLibs.mockito],
            [configuration: "testImplementation", dependency: robolectricLibs.core],
            [configuration: "testImplementation", dependency: robolectricLibs.multidex]
    ]

    componentsDependencies = [
            [configuration: "implementation", dependency: project(modules.commons)],

            [configuration: "implementation", dependency: support.material],
            [configuration: "implementation", dependency: support.constraintLayout],
            [configuration: "implementation", dependency: kotlinLibs.core],
            [configuration: "implementation", dependency: libs.threetenabp],
            [configuration: "implementation", dependency: libs.timber]
    ]

    commonsDependencies = [
            [configuration: "implementation", dependency: project(modules.resources)],

            [configuration: "implementation", dependency: support.material],
            [configuration: "implementation", dependency: kotlinLibs.core],
            [configuration: "implementation", dependency: rxLibs.android],
            [configuration: "implementation", dependency: rxLibs.kotlin],
            [configuration: "implementation", dependency: libs.gson],
            [configuration: "implementation", dependency: libs.threetenabp],
            [configuration: "implementation", dependency: libs.timber],
            [configuration: "implementation", dependency: glideLibs.core],
            [configuration: "implementation", dependency: mockitoLibs.mockito]
    ]

    resourcesDependencies = []

}
